class ExpenseTrackerApp{constructor(){this.expenses=[],this.filteredExpenses=[],this.editingId=null,this.init()}init(){this.loadExpenses(),ChartManager.init(),this.setupEventListeners(),this.render(),document.getElementById("date").valueAsDate=new Date,this.loadTheme()}setupEventListeners(){document.getElementById("addExpenseBtn").addEventListener("click",()=>this.showForm()),document.getElementById("closeFormBtn").addEventListener("click",()=>this.hideForm()),document.getElementById("cancelBtn").addEventListener("click",()=>this.hideForm()),document.getElementById("expenseFormElement").addEventListener("submit",e=>this.handleSubmit(e)),document.getElementById("searchInput").addEventListener("input",e=>this.handleSearch(e.target.value)),document.getElementById("categoryFilter").addEventListener("change",e=>this.handleCategoryFilter(e.target.value)),document.getElementById("paymentFilter").addEventListener("change",e=>this.handlePaymentFilter(e.target.value)),document.getElementById("exportBtn").addEventListener("click",()=>openExportModal()),document.getElementById("themeToggle").addEventListener("click",()=>this.toggleTheme()),document.getElementById("exportModal").addEventListener("click",e=>{"exportModal"===e.target.id&&closeExportModal()})}loadExpenses(){this.expenses=StorageManager.getExpenses(),this.filteredExpenses=[...this.expenses]}showForm(){document.getElementById("expenseForm").style.display="block",document.getElementById("formTitle").textContent="Add New Expense",document.getElementById("submitBtnText").textContent="Save Expense",this.editingId=null}hideForm(){document.getElementById("expenseForm").style.display="none",this.resetForm()}resetForm(){document.getElementById("expenseFormElement").reset(),document.getElementById("expenseId").value="",document.getElementById("date").valueAsDate=new Date,this.editingId=null}handleSubmit(e){e.preventDefault();const t={amount:document.getElementById("amount").value,date:document.getElementById("date").value,category:document.getElementById("category").value,paymentMethod:document.getElementById("paymentMethod").value,description:document.getElementById("description").value,recurring:document.getElementById("recurring").checked};this.editingId?StorageManager.updateExpense(this.editingId,t):StorageManager.addExpense(t),this.loadExpenses(),this.render(),this.hideForm(),ChartManager.updateCharts()}handleEdit(e){const t=StorageManager.getExpenseById(e);t&&(document.getElementById("amount").value=t.amount,document.getElementById("date").value=t.date,document.getElementById("category").value=t.category,document.getElementById("paymentMethod").value=t.paymentMethod,document.getElementById("description").value=t.description,document.getElementById("recurring").checked=t.recurring,document.getElementById("formTitle").textContent="Edit Expense",document.getElementById("submitBtnText").textContent="Update Expense",document.getElementById("expenseForm").style.display="block",this.editingId=e)}handleDelete(e){confirm("Are you sure you want to delete this expense?")&&(StorageManager.deleteExpense(e),this.loadExpenses(),this.render(),ChartManager.updateCharts())}handleSearch(e){this.applyFilters()}handleCategoryFilter(e){this.applyFilters()}handlePaymentFilter(e){this.applyFilters()}applyFilters(){const e=document.getElementById("searchInput").value.toLowerCase(),t=document.getElementById("categoryFilter").value,n=document.getElementById("paymentFilter").value;this.filteredExpenses=this.expenses.filter(a=>{const s=a.description.toLowerCase().includes(e),r="all"===t||a.category===t,o="all"===n||a.paymentMethod===n;return s&&r&&o}),this.renderExpensesList()}render(){this.updateStats(),this.renderExpensesList()}updateStats(){const e=StorageManager.getTotalExpenses(),t=StorageManager.getCurrentMonthExpenses().reduce((e,t)=>e+parseFloat(t.amount),0),n=this.expenses.length;document.getElementById("totalExpenses").textContent=`$${e.toFixed(2)}`,document.getElementById("monthlyExpenses").textContent=`$${t.toFixed(2)}`,document.getElementById("totalTransactions").textContent=n}renderExpensesList(){const e=document.getElementById("expensesList");if(0===this.filteredExpenses.length)return void(e.innerHTML='\n                <div class="empty-state">\n                    <i class="fas fa-receipt"></i>\n                    <p>No expenses found. Try adjusting your filters or add a new expense!</p>\n                </div>\n            ');const t=[...this.filteredExpenses].sort((e,t)=>new Date(t.date)-new Date(e.date));e.innerHTML=t.map(e=>this.createExpenseHTML(e)).join(""),t.forEach(e=>{document.getElementById(`edit-${e.id}`).addEventListener("click",()=>this.handleEdit(e.id)),document.getElementById(`delete-${e.id}`).addEventListener("click",()=>this.handleDelete(e.id))})}createExpenseHTML(e){const t=`category-${e.category.toLowerCase()}`,n=this.getPaymentIcon(e.paymentMethod),a=new Date(e.date).toLocaleDateString("en-US",{month:"short",day:"numeric",year:"numeric"});return`\n            <div class="expense-item">\n                <div class="expense-info">\n                    <div class="expense-header">\n                        <span class="expense-category ${t}">${e.category}</span>\n                        ${e.recurring?'<span class="expense-recurring"><i class="fas fa-sync"></i> Recurring</span>':""}\n                    </div>\n                    <div class="expense-description">${e.description}</div>\n                    <div class="expense-meta">\n                        <span><i class="fas fa-calendar"></i> ${a}</span>\n                        <span><i class="${n}"></i> ${e.paymentMethod}</span>\n                    </div>\n                </div>\n                <div class="expense-amount">$${parseFloat(e.amount).toFixed(2)}</div>\n                <div class="expense-actions">\n                    <button id="edit-${e.id}" class="btn btn-icon" title="Edit">\n                        <i class="fas fa-edit"></i>\n                    </button>\n                    <button id="delete-${e.id}" class="btn btn-icon btn-danger" title="Delete">\n                        <i class="fas fa-trash"></i>\n                    </button>\n                </div>\n            </div>\n        `}getPaymentIcon(e){return{Cash:"fas fa-money-bill-wave","Credit Card":"fas fa-credit-card","Debit Card":"fas fa-credit-card"}[e]||"fas fa-wallet"}toggleTheme(){const e=document.body,t=document.querySelector("#themeToggle i");"dark"===e.getAttribute("data-theme")?(e.removeAttribute("data-theme"),t.className="fas fa-moon",localStorage.setItem("theme","light")):(e.setAttribute("data-theme","dark"),t.className="fas fa-sun",localStorage.setItem("theme","dark")),setTimeout(()=>{ChartManager.updateCharts()},100)}loadTheme(){const e=localStorage.getItem("theme"),t=document.querySelector("#themeToggle i");"dark"===e&&(document.body.setAttribute("data-theme","dark"),t.className="fas fa-sun")}}document.addEventListener("DOMContentLoaded",()=>{new ExpenseTrackerApp});const StorageManager={STORAGE_KEY:"expenseTrackerData",getExpenses(){const e=localStorage.getItem(this.STORAGE_KEY);return e?JSON.parse(e):[]},saveExpenses(e){localStorage.setItem(this.STORAGE_KEY,JSON.stringify(e))},addExpense(e){const t=this.getExpenses();return e.id=Date.now().toString(),e.createdAt=(new Date).toISOString(),t.push(e),this.saveExpenses(t),e},updateExpense(e,t){let n=this.getExpenses();return n=n.map(n=>n.id===e?{...n,...t}:n),this.saveExpenses(n),t},deleteExpense(e){let t=this.getExpenses();t=t.filter(t=>t.id!==e),this.saveExpenses(t)},getExpenseById(e){return this.getExpenses().find(t=>t.id===e)},getExpensesByCategory(e){return this.getExpenses().filter(t=>t.category===e)},getExpensesByPayment(e){return this.getExpenses().filter(t=>t.paymentMethod===e)},getExpensesByDateRange(e,t){return this.getExpenses().filter(n=>{const a=new Date(n.date);return a>=new Date(e)&&a<=new Date(t)})},getTotalExpenses(){return this.getExpenses().reduce((e,t)=>e+parseFloat(t.amount),0)},getMonthlyExpenses(e,t){return this.getExpenses().filter(n=>{const a=new Date(n.date);return a.getFullYear()===e&&a.getMonth()===t})},getCurrentMonthExpenses(){const e=new Date;return this.getMonthlyExpenses(e.getFullYear(),e.getMonth())},getCategoryTotals(){const e=this.getExpenses(),t={};return e.forEach(e=>{t[e.category]||(t[e.category]=0),t[e.category]+=parseFloat(e.amount)}),t},getMonthlyTrends(){const e=this.getExpenses(),t={};e.forEach(e=>{const n=e.date.substring(0,7);t[n]||(t[n]=0),t[n]+=parseFloat(e.amount)});const n=Object.keys(t).sort().slice(-6),a={};return n.forEach(e=>{a[e]=t[e]}),a},clearAll(){localStorage.removeItem(this.STORAGE_KEY)}},ChartManager={categoryChart:null,trendChart:null,categoryColors:{Food:"#ef4444",Transport:"#06b6d4",Shopping:"#eab308",Bills:"#10b981",Entertainment:"#8b5cf6",Health:"#ec4899",Education:"#3b82f6",Other:"#6b7280"},init(){this.createCategoryChart(),this.createTrendChart()},createCategoryChart(){const e=document.getElementById("categoryChart");if(!e)return;const t=StorageManager.getCategoryTotals(),n=Object.keys(t),a=Object.values(t),s=n.map(e=>this.categoryColors[e]);this.categoryChart&&this.categoryChart.destroy(),0!==n.length?this.categoryChart=new Chart(e,{type:"doughnut",data:{labels:n,datasets:[{data:a,backgroundColor:s,borderWidth:2,borderColor:getComputedStyle(document.body).getPropertyValue("--bg-secondary")}]},options:{responsive:!0,maintainAspectRatio:!0,plugins:{legend:{position:"bottom",labels:{color:getComputedStyle(document.body).getPropertyValue("--text-primary"),padding:15,font:{size:12}}},tooltip:{callbacks:{label:function(e){return(e.label||"")+": $"+(e.parsed||0).toFixed(2)}}}}}}):e.parentElement.innerHTML='<p style="text-align: center; color: var(--text-secondary); padding: 2rem;">No data available</p>'},createTrendChart(){const e=document.getElementById("trendChart");if(!e)return;const t=StorageManager.getMonthlyTrends(),n=Object.keys(t),a=Object.values(t);this.trendChart&&this.trendChart.destroy(),0!==n.length?this.trendChart=new Chart(e,{type:"line",data:{labels:n.map(e=>{const[t,n]=e.split("-");return new Date(t,n-1).toLocaleDateString("en-US",{month:"short",year:"numeric"})}),datasets:[{label:"Monthly Spending",data:a,borderColor:"#3b82f6",backgroundColor:"rgba(59, 130, 246, 0.1)",borderWidth:2,fill:!0,tension:.4,pointBackgroundColor:"#3b82f6",pointBorderColor:"#fff",pointBorderWidth:2,pointRadius:4,pointHoverRadius:6}]},options:{responsive:!0,maintainAspectRatio:!0,plugins:{legend:{display:!1},tooltip:{callbacks:{label:function(e){return"Spending: $"+e.parsed.y.toFixed(2)}}}},scales:{y:{beginAtZero:!0,ticks:{color:getComputedStyle(document.body).getPropertyValue("--text-secondary"),callback:function(e){return"$"+e}},grid:{color:getComputedStyle(document.body).getPropertyValue("--border-color")}},x:{ticks:{color:getComputedStyle(document.body).getPropertyValue("--text-secondary")},grid:{color:getComputedStyle(document.body).getPropertyValue("--border-color")}}}}}):e.parentElement.innerHTML='<p style="text-align: center; color: var(--text-secondary); padding: 2rem;">No data available</p>'},updateCharts(){this.createCategoryChart(),this.createTrendChart()}},ExportManager={exportToCSV(){const e=StorageManager.getExpenses();if(0===e.length)return void alert("No expenses to export!");const t=[["Date","Category","Amount","Payment Method","Description","Recurring"],...e.map(e=>[e.date,e.category,e.amount,e.paymentMethod,`"${e.description}"`,e.recurring?"Yes":"No"])].map(e=>e.join(",")).join("\n"),n=new Blob([t],{type:"text/csv;charset=utf-8;"}),a=document.createElement("a"),s=URL.createObjectURL(n);a.setAttribute("href",s),a.setAttribute("download",`expenses_${this.getCurrentDate()}.csv`),a.style.visibility="hidden",document.body.appendChild(a),a.click(),document.body.removeChild(a)},exportToExcel(){const e=StorageManager.getExpenses();if(0===e.length)return void alert("No expenses to export!");const t=e.map(e=>({Date:e.date,Category:e.category,Amount:parseFloat(e.amount),"Payment Method":e.paymentMethod,Description:e.description,Recurring:e.recurring?"Yes":"No"})),n=XLSX.utils.json_to_sheet(t);n["!cols"]=[{wch:12},{wch:15},{wch:10},{wch:15},{wch:30},{wch:10}];const a=XLSX.utils.book_new();XLSX.utils.book_append_sheet(a,n,"Expenses");const s=StorageManager.getCategoryTotals(),r=Object.entries(s).map(([e,t])=>({Category:e,Total:parseFloat(t.toFixed(2))})),o=XLSX.utils.json_to_sheet(r);o["!cols"]=[{wch:15},{wch:12}],XLSX.utils.book_append_sheet(a,o,"Summary"),XLSX.writeFile(a,`expenses_${this.getCurrentDate()}.xlsx`)},getCurrentDate:()=>(new Date).toISOString().split("T")[0]};function openExportModal(){document.getElementById("exportModal").classList.add("active")}function closeExportModal(){document.getElementById("exportModal").classList.remove("active")}function exportData(e){"csv"===e?ExportManager.exportToCSV():"excel"===e&&ExportManager.exportToExcel(),closeExportModal()}